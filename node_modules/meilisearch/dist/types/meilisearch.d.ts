import { Index } from './index';
import * as Types from './types';
import HttpRequests from './http-requests';
declare class MeiliSearch implements Types.MeiliSearchInterface {
    config: Types.Config;
    httpRequest: HttpRequests;
    constructor(config: Types.Config);
    /**
     * Return an Index instance
     * @memberof MeiliSearch
     * @method getIndex
     */
    getIndex<T = any>(indexUid: string): Index<T>;
    /**
     * Get an index or create it if it does not exist
     * @memberof MeiliSearch
     * @method getOrCreateIndex
     */
    getOrCreateIndex<T = any>(uid: string, options?: Types.IndexOptions): Promise<Index<T>>;
    /**
     * List all indexes in the database
     * @memberof MeiliSearch
     * @method listIndexes
     */
    listIndexes(): Promise<Types.IndexResponse[]>;
    /**
     * Create a new index
     * @memberof MeiliSearch
     * @method createIndex
     */
    createIndex<T = any>(uid: string, options?: Types.IndexOptions): Promise<Index<T>>;
    /**
     * Get private and public key
     * @memberof MeiliSearch
     * @method getKey
     */
    getKeys(): Promise<Types.Keys>;
    /**
     * Checks if the server is healthy, otherwise an error will be thrown.
     *
     * @memberof MeiliSearch
     * @method isHealthy
     */
    isHealthy(): Promise<true>;
    /**
     * Change the healthyness to healthy
     * @memberof MeiliSearch
     * @method setHealthy
     */
    setHealthy(): Promise<void>;
    /**
     * Change the healthyness to unhealthy
     * @memberof MeiliSearch
     * @method setUnhealthy
     */
    setUnhealthy(): Promise<void>;
    /**
     * Set the healthyness to health value
     * @memberof MeiliSearch
     * @method changeHealthTo
     */
    changeHealthTo(health: boolean): Promise<void>;
    /**
     * Get the stats of all the database
     * @memberof MeiliSearch
     * @method stats
     */
    stats(): Promise<Types.Stats>;
    /**
     * Get the version of MeiliSearch
     * @memberof MeiliSearch
     * @method version
     */
    version(): Promise<Types.Version>;
    /**
     * Triggers a dump creation process
     * @memberof MeiliSearch
     * @method createDump
     */
    createDump(): Promise<Types.EnqueuedDump>;
    /**
     * Get the status of a dump creation process
     * @memberof MeiliSearch
     * @method getDumpStatus
     */
    getDumpStatus(dumpUid: string): Promise<Types.EnqueuedDump>;
}
export default MeiliSearch;
//# sourceMappingURL=meilisearch.d.ts.map